# This is the "dev" config. Designed as the default local dev config.
use Mix.Config

application_port = String.to_integer(System.get_env("PORT") || "4000")

encryption_keys =
  System.get_env("ENCRYPTION_KEYS") || "HOqyElOsSB50sZcjhqqkXRxWfLQSB4bGtglXvhqfakQ="

ssl_application_port = String.to_integer(System.get_env("PORT_SSL") || "443")

database_url = System.get_env("DATABASE_URL") || "ecto://postgres:docker@localhost/eps_dev"

is_release = System.get_env("RELEASE")

secret_key_base =
  System.get_env("SECRET_KEY_BASE") ||
    "ZnfvXfq91z5om0lWqBxlTce32/0vJqReJ8vngKJAtx8hyPIJpKhcZfDt//34oSAw"

website_host = System.get_env("WEBSITE_HOST") || "localhost"

scheme = if website_host == "localhost", do: "http", else: "https"

base_url_port = if website_host == "localhost", do: ":#{application_port}", else: ""

# Configurations the app itself
config :eps,
  base_url: "#{scheme}://#{website_host}#{base_url_port}",
  database_url: database_url,
  encryption_keys: encryption_keys,
  scheme: scheme,
  website_host: website_host

# Configure the database
config :eps, EPS.Repo,
  pool_size: String.to_integer(System.get_env("MAX_POOL") || "10"),
  # If the "RELEASE" environment variable is NOT set, show sensitive data on connection error.
  show_sensitive_data_on_connection_error: !is_release,
  # If running a local DB and it isn't set up for SSL, change this to `false`.
  ssl: false,
  url: database_url

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :eps, EPSWeb.Endpoint,
  check_origin: false,
  # If the "RELEASE" environment variable is NOT set, enable code_reloader.
  # If it IS set, then code_reloader CANNOT be enabled as Mix is not available in a release.
  code_reloader: !is_release,
  # If the "RELEASE" environment variable is NOT set, debug errors.
  debug_errors: !is_release,
  http: [port: application_port],
  # https: [
  #   port: ssl_application_port,
  #   cipher_suite: :strong,
  #   keyfile: "priv/cert/selfsigned_key.pem",
  #   certfile: "priv/cert/selfsigned.pem"
  # ],
  live_view: [signing_salt: secret_key_base],
  secret_key_base: secret_key_base,
  server: true,
  url: [host: website_host, port: application_port],
  watchers: []

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

config :git_hooks,
  auto_install: true,
  verbose: true,
  hooks: [
    pre_push: [
      tasks: [
        {:cmd, "mix format --check-formatted"},
        {:cmd, "mix credo"}
      ]
    ]
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 50

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime
